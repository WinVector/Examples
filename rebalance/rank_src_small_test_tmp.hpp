// Code generated by stanc v2.33.1
#include <stan/model/model_header.hpp>
namespace rank_src_small_test_tmp_model_namespace {
using stan::model::model_base_crtp;
using namespace stan::math;
stan::math::profile_map profiles__;
static constexpr std::array<const char*, 39> locations_array__ =
  {" (found before start of program)",
  " (in '/Users/johnmount/Documents/work/Examples/rebalance/rank_src_small_test_tmp.stan', line 12, column 2 to column 22)",
  " (in '/Users/johnmount/Documents/work/Examples/rebalance/rank_src_small_test_tmp.stan', line 13, column 2 to column 34)",
  " (in '/Users/johnmount/Documents/work/Examples/rebalance/rank_src_small_test_tmp.stan', line 16, column 2 to column 35)",
  " (in '/Users/johnmount/Documents/work/Examples/rebalance/rank_src_small_test_tmp.stan', line 17, column 2 to column 30)",
  " (in '/Users/johnmount/Documents/work/Examples/rebalance/rank_src_small_test_tmp.stan', line 18, column 2 to column 44)",
  " (in '/Users/johnmount/Documents/work/Examples/rebalance/rank_src_small_test_tmp.stan', line 19, column 2 to column 34)",
  " (in '/Users/johnmount/Documents/work/Examples/rebalance/rank_src_small_test_tmp.stan', line 20, column 2 to column 42)",
  " (in '/Users/johnmount/Documents/work/Examples/rebalance/rank_src_small_test_tmp.stan', line 21, column 2 to column 39)",
  " (in '/Users/johnmount/Documents/work/Examples/rebalance/rank_src_small_test_tmp.stan', line 22, column 2 to column 39)",
  " (in '/Users/johnmount/Documents/work/Examples/rebalance/rank_src_small_test_tmp.stan', line 23, column 2 to column 39)",
  " (in '/Users/johnmount/Documents/work/Examples/rebalance/rank_src_small_test_tmp.stan', line 24, column 2 to column 39)",
  " (in '/Users/johnmount/Documents/work/Examples/rebalance/rank_src_small_test_tmp.stan', line 28, column 2 to column 23)",
  " (in '/Users/johnmount/Documents/work/Examples/rebalance/rank_src_small_test_tmp.stan', line 29, column 2 to column 31)",
  " (in '/Users/johnmount/Documents/work/Examples/rebalance/rank_src_small_test_tmp.stan', line 33, column 4 to column 64)",
  " (in '/Users/johnmount/Documents/work/Examples/rebalance/rank_src_small_test_tmp.stan', line 32, column 21 to line 34, column 3)",
  " (in '/Users/johnmount/Documents/work/Examples/rebalance/rank_src_small_test_tmp.stan', line 32, column 2 to line 34, column 3)",
  " (in '/Users/johnmount/Documents/work/Examples/rebalance/rank_src_small_test_tmp.stan', line 3, column 2 to column 22)",
  " (in '/Users/johnmount/Documents/work/Examples/rebalance/rank_src_small_test_tmp.stan', line 4, column 2 to column 26)",
  " (in '/Users/johnmount/Documents/work/Examples/rebalance/rank_src_small_test_tmp.stan', line 5, column 9 to column 19)",
  " (in '/Users/johnmount/Documents/work/Examples/rebalance/rank_src_small_test_tmp.stan', line 5, column 21 to column 27)",
  " (in '/Users/johnmount/Documents/work/Examples/rebalance/rank_src_small_test_tmp.stan', line 5, column 2 to column 38)",
  " (in '/Users/johnmount/Documents/work/Examples/rebalance/rank_src_small_test_tmp.stan', line 6, column 9 to column 19)",
  " (in '/Users/johnmount/Documents/work/Examples/rebalance/rank_src_small_test_tmp.stan', line 6, column 21 to column 27)",
  " (in '/Users/johnmount/Documents/work/Examples/rebalance/rank_src_small_test_tmp.stan', line 6, column 2 to column 40)",
  " (in '/Users/johnmount/Documents/work/Examples/rebalance/rank_src_small_test_tmp.stan', line 7, column 9 to column 19)",
  " (in '/Users/johnmount/Documents/work/Examples/rebalance/rank_src_small_test_tmp.stan', line 7, column 21 to column 27)",
  " (in '/Users/johnmount/Documents/work/Examples/rebalance/rank_src_small_test_tmp.stan', line 7, column 2 to column 40)",
  " (in '/Users/johnmount/Documents/work/Examples/rebalance/rank_src_small_test_tmp.stan', line 8, column 9 to column 19)",
  " (in '/Users/johnmount/Documents/work/Examples/rebalance/rank_src_small_test_tmp.stan', line 8, column 21 to column 27)",
  " (in '/Users/johnmount/Documents/work/Examples/rebalance/rank_src_small_test_tmp.stan', line 8, column 2 to column 40)",
  " (in '/Users/johnmount/Documents/work/Examples/rebalance/rank_src_small_test_tmp.stan', line 9, column 9 to column 19)",
  " (in '/Users/johnmount/Documents/work/Examples/rebalance/rank_src_small_test_tmp.stan', line 9, column 21 to column 27)",
  " (in '/Users/johnmount/Documents/work/Examples/rebalance/rank_src_small_test_tmp.stan', line 9, column 2 to column 40)",
  " (in '/Users/johnmount/Documents/work/Examples/rebalance/rank_src_small_test_tmp.stan', line 12, column 9 to column 15)",
  " (in '/Users/johnmount/Documents/work/Examples/rebalance/rank_src_small_test_tmp.stan', line 13, column 9 to column 19)",
  " (in '/Users/johnmount/Documents/work/Examples/rebalance/rank_src_small_test_tmp.stan', line 16, column 9 to column 19)",
  " (in '/Users/johnmount/Documents/work/Examples/rebalance/rank_src_small_test_tmp.stan', line 17, column 9 to column 19)",
  " (in '/Users/johnmount/Documents/work/Examples/rebalance/rank_src_small_test_tmp.stan', line 18, column 18 to column 28)"};
class rank_src_small_test_tmp_model final : public model_base_crtp<rank_src_small_test_tmp_model> {
 private:
  int n_vars;
  int m_examples;
  Eigen::Matrix<double,-1,-1> x_picked_data__;
  Eigen::Matrix<double,-1,-1> x_passed_1_data__;
  Eigen::Matrix<double,-1,-1> x_passed_2_data__;
  Eigen::Matrix<double,-1,-1> x_passed_3_data__;
  Eigen::Matrix<double,-1,-1> x_passed_4_data__;
  Eigen::Map<Eigen::Matrix<double,-1,-1>> x_picked{nullptr, 0, 0};
  Eigen::Map<Eigen::Matrix<double,-1,-1>> x_passed_1{nullptr, 0, 0};
  Eigen::Map<Eigen::Matrix<double,-1,-1>> x_passed_2{nullptr, 0, 0};
  Eigen::Map<Eigen::Matrix<double,-1,-1>> x_passed_3{nullptr, 0, 0};
  Eigen::Map<Eigen::Matrix<double,-1,-1>> x_passed_4{nullptr, 0, 0};
 public:
  ~rank_src_small_test_tmp_model() {}
  rank_src_small_test_tmp_model(stan::io::var_context& context__,
                                unsigned int random_seed__ = 0, std::ostream*
                                pstream__ = nullptr) : model_base_crtp(0) {
    int current_statement__ = 0;
    // suppress unused var warning
    (void) current_statement__;
    using local_scalar_t__ = double;
    boost::ecuyer1988 base_rng__ =
      stan::services::util::create_rng(random_seed__, 0);
    // suppress unused var warning
    (void) base_rng__;
    static constexpr const char* function__ =
      "rank_src_small_test_tmp_model_namespace::rank_src_small_test_tmp_model";
    // suppress unused var warning
    (void) function__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    try {
      int pos__ = std::numeric_limits<int>::min();
      pos__ = 1;
      current_statement__ = 17;
      context__.validate_dims("data initialization", "n_vars", "int",
        std::vector<size_t>{});
      n_vars = std::numeric_limits<int>::min();
      current_statement__ = 17;
      n_vars = context__.vals_i("n_vars")[(1 - 1)];
      current_statement__ = 17;
      stan::math::check_greater_or_equal(function__, "n_vars", n_vars, 1);
      current_statement__ = 18;
      context__.validate_dims("data initialization", "m_examples", "int",
        std::vector<size_t>{});
      m_examples = std::numeric_limits<int>::min();
      current_statement__ = 18;
      m_examples = context__.vals_i("m_examples")[(1 - 1)];
      current_statement__ = 18;
      stan::math::check_greater_or_equal(function__, "m_examples",
        m_examples, 1);
      current_statement__ = 19;
      stan::math::validate_non_negative_index("x_picked", "m_examples",
        m_examples);
      current_statement__ = 20;
      stan::math::validate_non_negative_index("x_picked", "n_vars", n_vars);
      current_statement__ = 21;
      context__.validate_dims("data initialization", "x_picked", "double",
        std::vector<size_t>{static_cast<size_t>(m_examples),
          static_cast<size_t>(n_vars)});
      x_picked_data__ = Eigen::Matrix<double,-1,-1>::Constant(m_examples,
                          n_vars, std::numeric_limits<double>::quiet_NaN());
      new (&x_picked)
        Eigen::Map<Eigen::Matrix<double,-1,-1>>(x_picked_data__.data(),
        m_examples, n_vars);
      {
        std::vector<local_scalar_t__> x_picked_flat__;
        current_statement__ = 21;
        x_picked_flat__ = context__.vals_r("x_picked");
        pos__ = 1;
        for (int sym1__ = 1; sym1__ <= n_vars; ++sym1__) {
          for (int sym2__ = 1; sym2__ <= m_examples; ++sym2__) {
            stan::model::assign(x_picked, x_picked_flat__[(pos__ - 1)],
              "assigning variable x_picked", stan::model::index_uni(sym2__),
              stan::model::index_uni(sym1__));
            pos__ = (pos__ + 1);
          }
        }
      }
      current_statement__ = 22;
      stan::math::validate_non_negative_index("x_passed_1", "m_examples",
        m_examples);
      current_statement__ = 23;
      stan::math::validate_non_negative_index("x_passed_1", "n_vars", n_vars);
      current_statement__ = 24;
      context__.validate_dims("data initialization", "x_passed_1", "double",
        std::vector<size_t>{static_cast<size_t>(m_examples),
          static_cast<size_t>(n_vars)});
      x_passed_1_data__ = Eigen::Matrix<double,-1,-1>::Constant(m_examples,
                            n_vars, std::numeric_limits<double>::quiet_NaN());
      new (&x_passed_1)
        Eigen::Map<Eigen::Matrix<double,-1,-1>>(x_passed_1_data__.data(),
        m_examples, n_vars);
      {
        std::vector<local_scalar_t__> x_passed_1_flat__;
        current_statement__ = 24;
        x_passed_1_flat__ = context__.vals_r("x_passed_1");
        pos__ = 1;
        for (int sym1__ = 1; sym1__ <= n_vars; ++sym1__) {
          for (int sym2__ = 1; sym2__ <= m_examples; ++sym2__) {
            stan::model::assign(x_passed_1, x_passed_1_flat__[(pos__ - 1)],
              "assigning variable x_passed_1",
              stan::model::index_uni(sym2__), stan::model::index_uni(sym1__));
            pos__ = (pos__ + 1);
          }
        }
      }
      current_statement__ = 25;
      stan::math::validate_non_negative_index("x_passed_2", "m_examples",
        m_examples);
      current_statement__ = 26;
      stan::math::validate_non_negative_index("x_passed_2", "n_vars", n_vars);
      current_statement__ = 27;
      context__.validate_dims("data initialization", "x_passed_2", "double",
        std::vector<size_t>{static_cast<size_t>(m_examples),
          static_cast<size_t>(n_vars)});
      x_passed_2_data__ = Eigen::Matrix<double,-1,-1>::Constant(m_examples,
                            n_vars, std::numeric_limits<double>::quiet_NaN());
      new (&x_passed_2)
        Eigen::Map<Eigen::Matrix<double,-1,-1>>(x_passed_2_data__.data(),
        m_examples, n_vars);
      {
        std::vector<local_scalar_t__> x_passed_2_flat__;
        current_statement__ = 27;
        x_passed_2_flat__ = context__.vals_r("x_passed_2");
        pos__ = 1;
        for (int sym1__ = 1; sym1__ <= n_vars; ++sym1__) {
          for (int sym2__ = 1; sym2__ <= m_examples; ++sym2__) {
            stan::model::assign(x_passed_2, x_passed_2_flat__[(pos__ - 1)],
              "assigning variable x_passed_2",
              stan::model::index_uni(sym2__), stan::model::index_uni(sym1__));
            pos__ = (pos__ + 1);
          }
        }
      }
      current_statement__ = 28;
      stan::math::validate_non_negative_index("x_passed_3", "m_examples",
        m_examples);
      current_statement__ = 29;
      stan::math::validate_non_negative_index("x_passed_3", "n_vars", n_vars);
      current_statement__ = 30;
      context__.validate_dims("data initialization", "x_passed_3", "double",
        std::vector<size_t>{static_cast<size_t>(m_examples),
          static_cast<size_t>(n_vars)});
      x_passed_3_data__ = Eigen::Matrix<double,-1,-1>::Constant(m_examples,
                            n_vars, std::numeric_limits<double>::quiet_NaN());
      new (&x_passed_3)
        Eigen::Map<Eigen::Matrix<double,-1,-1>>(x_passed_3_data__.data(),
        m_examples, n_vars);
      {
        std::vector<local_scalar_t__> x_passed_3_flat__;
        current_statement__ = 30;
        x_passed_3_flat__ = context__.vals_r("x_passed_3");
        pos__ = 1;
        for (int sym1__ = 1; sym1__ <= n_vars; ++sym1__) {
          for (int sym2__ = 1; sym2__ <= m_examples; ++sym2__) {
            stan::model::assign(x_passed_3, x_passed_3_flat__[(pos__ - 1)],
              "assigning variable x_passed_3",
              stan::model::index_uni(sym2__), stan::model::index_uni(sym1__));
            pos__ = (pos__ + 1);
          }
        }
      }
      current_statement__ = 31;
      stan::math::validate_non_negative_index("x_passed_4", "m_examples",
        m_examples);
      current_statement__ = 32;
      stan::math::validate_non_negative_index("x_passed_4", "n_vars", n_vars);
      current_statement__ = 33;
      context__.validate_dims("data initialization", "x_passed_4", "double",
        std::vector<size_t>{static_cast<size_t>(m_examples),
          static_cast<size_t>(n_vars)});
      x_passed_4_data__ = Eigen::Matrix<double,-1,-1>::Constant(m_examples,
                            n_vars, std::numeric_limits<double>::quiet_NaN());
      new (&x_passed_4)
        Eigen::Map<Eigen::Matrix<double,-1,-1>>(x_passed_4_data__.data(),
        m_examples, n_vars);
      {
        std::vector<local_scalar_t__> x_passed_4_flat__;
        current_statement__ = 33;
        x_passed_4_flat__ = context__.vals_r("x_passed_4");
        pos__ = 1;
        for (int sym1__ = 1; sym1__ <= n_vars; ++sym1__) {
          for (int sym2__ = 1; sym2__ <= m_examples; ++sym2__) {
            stan::model::assign(x_passed_4, x_passed_4_flat__[(pos__ - 1)],
              "assigning variable x_passed_4",
              stan::model::index_uni(sym2__), stan::model::index_uni(sym1__));
            pos__ = (pos__ + 1);
          }
        }
      }
      current_statement__ = 34;
      stan::math::validate_non_negative_index("beta", "n_vars", n_vars);
      current_statement__ = 35;
      stan::math::validate_non_negative_index("error_picked", "m_examples",
        m_examples);
      current_statement__ = 36;
      stan::math::validate_non_negative_index("expect_picked", "m_examples",
        m_examples);
      current_statement__ = 37;
      stan::math::validate_non_negative_index("v_picked", "m_examples",
        m_examples);
      current_statement__ = 38;
      stan::math::validate_non_negative_index("expect_passed", "m_examples",
        m_examples);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    num_params_r__ = n_vars + m_examples;
  }
  inline std::string model_name() const final {
    return "rank_src_small_test_tmp_model";
  }
  inline std::vector<std::string> model_compile_info() const noexcept {
    return std::vector<std::string>{"stanc_version = stanc3 v2.33.1",
             "stancflags = "};
  }
  // Base log prob
  template <bool propto__, bool jacobian__, typename VecR, typename VecI,
            stan::require_vector_like_t<VecR>* = nullptr,
            stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr,
            stan::require_not_st_var<VecR>* = nullptr>
  inline stan::scalar_type_t<VecR>
  log_prob_impl(VecR& params_r__, VecI& params_i__, std::ostream*
                pstream__ = nullptr) const {
    using T__ = stan::scalar_type_t<VecR>;
    using local_scalar_t__ = T__;
    T__ lp__(0.0);
    stan::math::accumulator<T__> lp_accum__;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    int current_statement__ = 0;
    // suppress unused var warning
    (void) current_statement__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    static constexpr const char* function__ =
      "rank_src_small_test_tmp_model_namespace::log_prob";
    // suppress unused var warning
    (void) function__;
    try {
      Eigen::Matrix<local_scalar_t__,-1,1> beta =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(n_vars, DUMMY_VAR__);
      current_statement__ = 1;
      beta = in__.template read<Eigen::Matrix<local_scalar_t__,-1,1>>(n_vars);
      Eigen::Matrix<local_scalar_t__,-1,1> error_picked =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(m_examples,
          DUMMY_VAR__);
      current_statement__ = 2;
      error_picked = in__.template read<
                       Eigen::Matrix<local_scalar_t__,-1,1>>(m_examples);
      Eigen::Matrix<local_scalar_t__,-1,1> expect_picked =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(m_examples,
          DUMMY_VAR__);
      Eigen::Matrix<local_scalar_t__,-1,1> v_picked =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(m_examples,
          DUMMY_VAR__);
      std::vector<Eigen::Matrix<local_scalar_t__,-1,1>> expect_passed =
        std::vector<Eigen::Matrix<local_scalar_t__,-1,1>>(4,
          Eigen::Matrix<local_scalar_t__,-1,1>::Constant(m_examples,
            DUMMY_VAR__));
      current_statement__ = 6;
      stan::model::assign(expect_picked,
        stan::math::multiply(x_picked, beta),
        "assigning variable expect_picked");
      current_statement__ = 7;
      stan::model::assign(v_picked,
        stan::math::add(expect_picked, error_picked),
        "assigning variable v_picked");
      current_statement__ = 8;
      stan::model::assign(expect_passed,
        stan::math::multiply(x_passed_1, beta),
        "assigning variable expect_passed", stan::model::index_uni(1));
      current_statement__ = 9;
      stan::model::assign(expect_passed,
        stan::math::multiply(x_passed_2, beta),
        "assigning variable expect_passed", stan::model::index_uni(2));
      current_statement__ = 10;
      stan::model::assign(expect_passed,
        stan::math::multiply(x_passed_3, beta),
        "assigning variable expect_passed", stan::model::index_uni(3));
      current_statement__ = 11;
      stan::model::assign(expect_passed,
        stan::math::multiply(x_passed_4, beta),
        "assigning variable expect_passed", stan::model::index_uni(4));
      {
        current_statement__ = 12;
        lp_accum__.add(stan::math::normal_lpdf<propto__>(beta, 0, 10));
        current_statement__ = 13;
        lp_accum__.add(stan::math::normal_lpdf<propto__>(error_picked, 0, 10));
        current_statement__ = 16;
        for (int sel_j = 1; sel_j <= 4; ++sel_j) {
          current_statement__ = 14;
          lp_accum__.add(stan::math::normal_lcdf(v_picked,
                           stan::model::rvalue(expect_passed,
                             "expect_passed", stan::model::index_uni(sel_j)),
                           10));
        }
      }
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    lp_accum__.add(lp__);
    return lp_accum__.sum();
  }
  // Reverse mode autodiff log prob
  template <bool propto__, bool jacobian__, typename VecR, typename VecI,
            stan::require_vector_like_t<VecR>* = nullptr,
            stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr,
            stan::require_st_var<VecR>* = nullptr>
  inline stan::scalar_type_t<VecR>
  log_prob_impl(VecR& params_r__, VecI& params_i__, std::ostream*
                pstream__ = nullptr) const {
    using T__ = stan::scalar_type_t<VecR>;
    using local_scalar_t__ = T__;
    T__ lp__(0.0);
    stan::math::accumulator<T__> lp_accum__;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    int current_statement__ = 0;
    // suppress unused var warning
    (void) current_statement__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    static constexpr const char* function__ =
      "rank_src_small_test_tmp_model_namespace::log_prob";
    // suppress unused var warning
    (void) function__;
    try {
      Eigen::Matrix<local_scalar_t__,-1,1> beta =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(n_vars, DUMMY_VAR__);
      current_statement__ = 1;
      beta = in__.template read<Eigen::Matrix<local_scalar_t__,-1,1>>(n_vars);
      Eigen::Matrix<local_scalar_t__,-1,1> error_picked =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(m_examples,
          DUMMY_VAR__);
      current_statement__ = 2;
      error_picked = in__.template read<
                       Eigen::Matrix<local_scalar_t__,-1,1>>(m_examples);
      Eigen::Matrix<local_scalar_t__,-1,1> expect_picked =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(m_examples,
          DUMMY_VAR__);
      Eigen::Matrix<local_scalar_t__,-1,1> v_picked =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(m_examples,
          DUMMY_VAR__);
      std::vector<Eigen::Matrix<local_scalar_t__,-1,1>> expect_passed =
        std::vector<Eigen::Matrix<local_scalar_t__,-1,1>>(4,
          Eigen::Matrix<local_scalar_t__,-1,1>::Constant(m_examples,
            DUMMY_VAR__));
      current_statement__ = 6;
      stan::model::assign(expect_picked,
        stan::math::multiply(x_picked, beta),
        "assigning variable expect_picked");
      current_statement__ = 7;
      stan::model::assign(v_picked,
        stan::math::add(expect_picked, error_picked),
        "assigning variable v_picked");
      current_statement__ = 8;
      stan::model::assign(expect_passed,
        stan::math::multiply(x_passed_1, beta),
        "assigning variable expect_passed", stan::model::index_uni(1));
      current_statement__ = 9;
      stan::model::assign(expect_passed,
        stan::math::multiply(x_passed_2, beta),
        "assigning variable expect_passed", stan::model::index_uni(2));
      current_statement__ = 10;
      stan::model::assign(expect_passed,
        stan::math::multiply(x_passed_3, beta),
        "assigning variable expect_passed", stan::model::index_uni(3));
      current_statement__ = 11;
      stan::model::assign(expect_passed,
        stan::math::multiply(x_passed_4, beta),
        "assigning variable expect_passed", stan::model::index_uni(4));
      {
        current_statement__ = 12;
        lp_accum__.add(stan::math::normal_lpdf<propto__>(beta, 0, 10));
        current_statement__ = 13;
        lp_accum__.add(stan::math::normal_lpdf<propto__>(error_picked, 0, 10));
        current_statement__ = 16;
        for (int sel_j = 1; sel_j <= 4; ++sel_j) {
          current_statement__ = 14;
          lp_accum__.add(stan::math::normal_lcdf(v_picked,
                           stan::model::rvalue(expect_passed,
                             "expect_passed", stan::model::index_uni(sel_j)),
                           10));
        }
      }
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    lp_accum__.add(lp__);
    return lp_accum__.sum();
  }
  template <typename RNG, typename VecR, typename VecI, typename VecVar,
            stan::require_vector_like_vt<std::is_floating_point,
            VecR>* = nullptr, stan::require_vector_like_vt<std::is_integral,
            VecI>* = nullptr, stan::require_vector_vt<std::is_floating_point,
            VecVar>* = nullptr>
  inline void
  write_array_impl(RNG& base_rng__, VecR& params_r__, VecI& params_i__,
                   VecVar& vars__, const bool
                   emit_transformed_parameters__ = true, const bool
                   emit_generated_quantities__ = true, std::ostream*
                   pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    stan::io::serializer<local_scalar_t__> out__(vars__);
    static constexpr bool propto__ = true;
    // suppress unused var warning
    (void) propto__;
    double lp__ = 0.0;
    // suppress unused var warning
    (void) lp__;
    int current_statement__ = 0;
    // suppress unused var warning
    (void) current_statement__;
    stan::math::accumulator<double> lp_accum__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    constexpr bool jacobian__ = false;
    // suppress unused var warning
    (void) jacobian__;
    static constexpr const char* function__ =
      "rank_src_small_test_tmp_model_namespace::write_array";
    // suppress unused var warning
    (void) function__;
    try {
      Eigen::Matrix<double,-1,1> beta =
        Eigen::Matrix<double,-1,1>::Constant(n_vars,
          std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 1;
      beta = in__.template read<Eigen::Matrix<local_scalar_t__,-1,1>>(n_vars);
      Eigen::Matrix<double,-1,1> error_picked =
        Eigen::Matrix<double,-1,1>::Constant(m_examples,
          std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 2;
      error_picked = in__.template read<
                       Eigen::Matrix<local_scalar_t__,-1,1>>(m_examples);
      Eigen::Matrix<double,-1,1> expect_picked =
        Eigen::Matrix<double,-1,1>::Constant(m_examples,
          std::numeric_limits<double>::quiet_NaN());
      Eigen::Matrix<double,-1,1> v_picked =
        Eigen::Matrix<double,-1,1>::Constant(m_examples,
          std::numeric_limits<double>::quiet_NaN());
      std::vector<Eigen::Matrix<double,-1,1>> expect_passed =
        std::vector<Eigen::Matrix<double,-1,1>>(4,
          Eigen::Matrix<double,-1,1>::Constant(m_examples,
            std::numeric_limits<double>::quiet_NaN()));
      out__.write(beta);
      out__.write(error_picked);
      if (stan::math::logical_negation(
            (stan::math::primitive_value(emit_transformed_parameters__) ||
            stan::math::primitive_value(emit_generated_quantities__)))) {
        return ;
      }
      current_statement__ = 6;
      stan::model::assign(expect_picked,
        stan::math::multiply(x_picked, beta),
        "assigning variable expect_picked");
      current_statement__ = 7;
      stan::model::assign(v_picked,
        stan::math::add(expect_picked, error_picked),
        "assigning variable v_picked");
      current_statement__ = 8;
      stan::model::assign(expect_passed,
        stan::math::multiply(x_passed_1, beta),
        "assigning variable expect_passed", stan::model::index_uni(1));
      current_statement__ = 9;
      stan::model::assign(expect_passed,
        stan::math::multiply(x_passed_2, beta),
        "assigning variable expect_passed", stan::model::index_uni(2));
      current_statement__ = 10;
      stan::model::assign(expect_passed,
        stan::math::multiply(x_passed_3, beta),
        "assigning variable expect_passed", stan::model::index_uni(3));
      current_statement__ = 11;
      stan::model::assign(expect_passed,
        stan::math::multiply(x_passed_4, beta),
        "assigning variable expect_passed", stan::model::index_uni(4));
      if (emit_transformed_parameters__) {
        out__.write(expect_picked);
        out__.write(v_picked);
        current_statement__ = 5;
        for (int sym1__ = 1; sym1__ <= m_examples; ++sym1__) {
          for (int sym2__ = 1; sym2__ <= 4; ++sym2__) {
            out__.write(expect_passed[(sym2__ - 1)][(sym1__ - 1)]);
          }
        }
      }
      if (stan::math::logical_negation(emit_generated_quantities__)) {
        return ;
      }
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
  }
  template <typename VecVar, typename VecI,
            stan::require_vector_t<VecVar>* = nullptr,
            stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr>
  inline void
  unconstrain_array_impl(const VecVar& params_r__, const VecI& params_i__,
                         VecVar& vars__, std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    stan::io::serializer<local_scalar_t__> out__(vars__);
    int current_statement__ = 0;
    // suppress unused var warning
    (void) current_statement__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    try {
      Eigen::Matrix<local_scalar_t__,-1,1> beta =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(n_vars, DUMMY_VAR__);
      current_statement__ = 1;
      stan::model::assign(beta,
        in__.read<Eigen::Matrix<local_scalar_t__,-1,1>>(n_vars),
        "assigning variable beta");
      out__.write(beta);
      Eigen::Matrix<local_scalar_t__,-1,1> error_picked =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(m_examples,
          DUMMY_VAR__);
      current_statement__ = 2;
      stan::model::assign(error_picked,
        in__.read<Eigen::Matrix<local_scalar_t__,-1,1>>(m_examples),
        "assigning variable error_picked");
      out__.write(error_picked);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
  }
  template <typename VecVar, stan::require_vector_t<VecVar>* = nullptr>
  inline void
  transform_inits_impl(const stan::io::var_context& context__, VecVar&
                       vars__, std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::serializer<local_scalar_t__> out__(vars__);
    int current_statement__ = 0;
    // suppress unused var warning
    (void) current_statement__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    try {
      current_statement__ = 1;
      context__.validate_dims("parameter initialization", "beta", "double",
        std::vector<size_t>{static_cast<size_t>(n_vars)});
      current_statement__ = 2;
      context__.validate_dims("parameter initialization", "error_picked",
        "double", std::vector<size_t>{static_cast<size_t>(m_examples)});
      int pos__ = std::numeric_limits<int>::min();
      pos__ = 1;
      Eigen::Matrix<local_scalar_t__,-1,1> beta =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(n_vars, DUMMY_VAR__);
      {
        std::vector<local_scalar_t__> beta_flat__;
        current_statement__ = 1;
        beta_flat__ = context__.vals_r("beta");
        pos__ = 1;
        for (int sym1__ = 1; sym1__ <= n_vars; ++sym1__) {
          stan::model::assign(beta, beta_flat__[(pos__ - 1)],
            "assigning variable beta", stan::model::index_uni(sym1__));
          pos__ = (pos__ + 1);
        }
      }
      out__.write(beta);
      Eigen::Matrix<local_scalar_t__,-1,1> error_picked =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(m_examples,
          DUMMY_VAR__);
      {
        std::vector<local_scalar_t__> error_picked_flat__;
        current_statement__ = 2;
        error_picked_flat__ = context__.vals_r("error_picked");
        pos__ = 1;
        for (int sym1__ = 1; sym1__ <= m_examples; ++sym1__) {
          stan::model::assign(error_picked, error_picked_flat__[(pos__ - 1)],
            "assigning variable error_picked", stan::model::index_uni(sym1__));
          pos__ = (pos__ + 1);
        }
      }
      out__.write(error_picked);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
  }
  inline void
  get_param_names(std::vector<std::string>& names__, const bool
                  emit_transformed_parameters__ = true, const bool
                  emit_generated_quantities__ = true) const {
    names__ = std::vector<std::string>{"beta", "error_picked"};
    if (emit_transformed_parameters__) {
      std::vector<std::string>
        temp{"expect_picked", "v_picked", "expect_passed"};
      names__.reserve(names__.size() + temp.size());
      names__.insert(names__.end(), temp.begin(), temp.end());
    }
    if (emit_generated_quantities__) {}
  }
  inline void
  get_dims(std::vector<std::vector<size_t>>& dimss__, const bool
           emit_transformed_parameters__ = true, const bool
           emit_generated_quantities__ = true) const {
    dimss__ = std::vector<std::vector<size_t>>{std::vector<size_t>{static_cast<
                                                                    size_t>(
                                                                    n_vars)},
                std::vector<size_t>{static_cast<size_t>(m_examples)}};
    if (emit_transformed_parameters__) {
      std::vector<std::vector<size_t>>
        temp{std::vector<size_t>{static_cast<size_t>(m_examples)},
             std::vector<size_t>{static_cast<size_t>(m_examples)},
             std::vector<size_t>{static_cast<size_t>(4),
               static_cast<size_t>(m_examples)}};
      dimss__.reserve(dimss__.size() + temp.size());
      dimss__.insert(dimss__.end(), temp.begin(), temp.end());
    }
    if (emit_generated_quantities__) {}
  }
  inline void
  constrained_param_names(std::vector<std::string>& param_names__, bool
                          emit_transformed_parameters__ = true, bool
                          emit_generated_quantities__ = true) const final {
    for (int sym1__ = 1; sym1__ <= n_vars; ++sym1__) {
      param_names__.emplace_back(std::string() + "beta" + '.' +
        std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= m_examples; ++sym1__) {
      param_names__.emplace_back(std::string() + "error_picked" + '.' +
        std::to_string(sym1__));
    }
    if (emit_transformed_parameters__) {
      for (int sym1__ = 1; sym1__ <= m_examples; ++sym1__) {
        param_names__.emplace_back(std::string() + "expect_picked" + '.' +
          std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= m_examples; ++sym1__) {
        param_names__.emplace_back(std::string() + "v_picked" + '.' +
          std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= m_examples; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= 4; ++sym2__) {
          param_names__.emplace_back(std::string() + "expect_passed" + '.' +
            std::to_string(sym2__) + '.' + std::to_string(sym1__));
        }
      }
    }
    if (emit_generated_quantities__) {}
  }
  inline void
  unconstrained_param_names(std::vector<std::string>& param_names__, bool
                            emit_transformed_parameters__ = true, bool
                            emit_generated_quantities__ = true) const final {
    for (int sym1__ = 1; sym1__ <= n_vars; ++sym1__) {
      param_names__.emplace_back(std::string() + "beta" + '.' +
        std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= m_examples; ++sym1__) {
      param_names__.emplace_back(std::string() + "error_picked" + '.' +
        std::to_string(sym1__));
    }
    if (emit_transformed_parameters__) {
      for (int sym1__ = 1; sym1__ <= m_examples; ++sym1__) {
        param_names__.emplace_back(std::string() + "expect_picked" + '.' +
          std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= m_examples; ++sym1__) {
        param_names__.emplace_back(std::string() + "v_picked" + '.' +
          std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= m_examples; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= 4; ++sym2__) {
          param_names__.emplace_back(std::string() + "expect_passed" + '.' +
            std::to_string(sym2__) + '.' + std::to_string(sym1__));
        }
      }
    }
    if (emit_generated_quantities__) {}
  }
  inline std::string get_constrained_sizedtypes() const {
    return std::string("[{\"name\":\"beta\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(n_vars) + "},\"block\":\"parameters\"},{\"name\":\"error_picked\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(m_examples) + "},\"block\":\"parameters\"},{\"name\":\"expect_picked\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(m_examples) + "},\"block\":\"transformed_parameters\"},{\"name\":\"v_picked\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(m_examples) + "},\"block\":\"transformed_parameters\"},{\"name\":\"expect_passed\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(4) + ",\"element_type\":{\"name\":\"vector\",\"length\":" + std::to_string(m_examples) + "}},\"block\":\"transformed_parameters\"}]");
  }
  inline std::string get_unconstrained_sizedtypes() const {
    return std::string("[{\"name\":\"beta\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(n_vars) + "},\"block\":\"parameters\"},{\"name\":\"error_picked\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(m_examples) + "},\"block\":\"parameters\"},{\"name\":\"expect_picked\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(m_examples) + "},\"block\":\"transformed_parameters\"},{\"name\":\"v_picked\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(m_examples) + "},\"block\":\"transformed_parameters\"},{\"name\":\"expect_passed\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(4) + ",\"element_type\":{\"name\":\"vector\",\"length\":" + std::to_string(m_examples) + "}},\"block\":\"transformed_parameters\"}]");
  }
  // Begin method overload boilerplate
  template <typename RNG> inline void
  write_array(RNG& base_rng, Eigen::Matrix<double,-1,1>& params_r,
              Eigen::Matrix<double,-1,1>& vars, const bool
              emit_transformed_parameters = true, const bool
              emit_generated_quantities = true, std::ostream*
              pstream = nullptr) const {
    const size_t num_params__ = (n_vars + m_examples);
    const size_t num_transformed = emit_transformed_parameters *
      (((m_examples + m_examples) + (4 * m_examples)));
    const size_t num_gen_quantities = emit_generated_quantities * (0);
    const size_t num_to_write = num_params__ + num_transformed +
      num_gen_quantities;
    std::vector<int> params_i;
    vars = Eigen::Matrix<double,-1,1>::Constant(num_to_write,
             std::numeric_limits<double>::quiet_NaN());
    write_array_impl(base_rng, params_r, params_i, vars,
      emit_transformed_parameters, emit_generated_quantities, pstream);
  }
  template <typename RNG> inline void
  write_array(RNG& base_rng, std::vector<double>& params_r, std::vector<int>&
              params_i, std::vector<double>& vars, bool
              emit_transformed_parameters = true, bool
              emit_generated_quantities = true, std::ostream*
              pstream = nullptr) const {
    const size_t num_params__ = (n_vars + m_examples);
    const size_t num_transformed = emit_transformed_parameters *
      (((m_examples + m_examples) + (4 * m_examples)));
    const size_t num_gen_quantities = emit_generated_quantities * (0);
    const size_t num_to_write = num_params__ + num_transformed +
      num_gen_quantities;
    vars = std::vector<double>(num_to_write,
             std::numeric_limits<double>::quiet_NaN());
    write_array_impl(base_rng, params_r, params_i, vars,
      emit_transformed_parameters, emit_generated_quantities, pstream);
  }
  template <bool propto__, bool jacobian__, typename T_> inline T_
  log_prob(Eigen::Matrix<T_,-1,1>& params_r, std::ostream* pstream = nullptr) const {
    Eigen::Matrix<int,-1,1> params_i;
    return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
  }
  template <bool propto__, bool jacobian__, typename T_> inline T_
  log_prob(std::vector<T_>& params_r, std::vector<int>& params_i,
           std::ostream* pstream = nullptr) const {
    return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
  }
  inline void
  transform_inits(const stan::io::var_context& context,
                  Eigen::Matrix<double,-1,1>& params_r, std::ostream*
                  pstream = nullptr) const final {
    std::vector<double> params_r_vec(params_r.size());
    std::vector<int> params_i;
    transform_inits(context, params_i, params_r_vec, pstream);
    params_r = Eigen::Map<Eigen::Matrix<double,-1,1>>(params_r_vec.data(),
                 params_r_vec.size());
  }
  inline void
  transform_inits(const stan::io::var_context& context, std::vector<int>&
                  params_i, std::vector<double>& vars, std::ostream*
                  pstream__ = nullptr) const {
    vars.resize(num_params_r__);
    transform_inits_impl(context, vars, pstream__);
  }
  inline void
  unconstrain_array(const std::vector<double>& params_constrained,
                    std::vector<double>& params_unconstrained, std::ostream*
                    pstream = nullptr) const {
    const std::vector<int> params_i;
    params_unconstrained = std::vector<double>(num_params_r__,
                             std::numeric_limits<double>::quiet_NaN());
    unconstrain_array_impl(params_constrained, params_i,
      params_unconstrained, pstream);
  }
  inline void
  unconstrain_array(const Eigen::Matrix<double,-1,1>& params_constrained,
                    Eigen::Matrix<double,-1,1>& params_unconstrained,
                    std::ostream* pstream = nullptr) const {
    const std::vector<int> params_i;
    params_unconstrained = Eigen::Matrix<double,-1,1>::Constant(num_params_r__,
                             std::numeric_limits<double>::quiet_NaN());
    unconstrain_array_impl(params_constrained, params_i,
      params_unconstrained, pstream);
  }
};
}
using stan_model = rank_src_small_test_tmp_model_namespace::rank_src_small_test_tmp_model;
#ifndef USING_R
// Boilerplate
stan::model::model_base&
new_model(stan::io::var_context& data_context, unsigned int seed,
          std::ostream* msg_stream) {
  stan_model* m = new stan_model(data_context, seed, msg_stream);
  return *m;
}
stan::math::profile_map& get_stan_profile_data() {
  return rank_src_small_test_tmp_model_namespace::profiles__;
}
#endif